# === General & Setup ===
APP_DESCRIPTION = "Command-line tool to download ROMs via CrocDB API."
LOGGING_SYSTEM_SETUP = "Logging system configured."
DIR_STRUCTURE_CHECK = "‚åÅ Verifying directory structure..."
DIR_CREATED = "  ‚Üí Creating directory: {}"
DIR_STRUCTURE_SUCCESS = "‚úîÔ∏è Directory structure checked successfully."

# === CLI & Interactive Shell ===
COMMANDS_HELP = "Available commands"
INTERACTIVE_SHELL_WELCOME = "Welcome to the Interactive Shell. Type 'help' for a list of commands or 'exit' to quit."
INTERACTIVE_SHELL_EXIT = "Exiting shell. Goodbye!"
SEARCH_START = "üîé  Starting search for '{}'..."
DOWNLOAD_LIST_START = "üìö Starting download from list '{}'..."
PROMPT_SELECT_ROM = "Enter the number of the ROM to download (or press Enter to cancel)"
ROM_SELECTED_FOR_DOWNLOAD = "ROM '{}' selected for download."
LIST_PROCESSING_ROM = "Processing '{}'..."
LIST_SELECT_PROMPT = "Please select a list to download:"
LIST_NO_FILES_FOUND = "No list files (.json) found in the 'list/' directory."
LIST_CONFIRM_DOWNLOAD_TEXT = "This list contains {} ROMs. Do you want to start the download?"
LIST_CONFIRM_DOWNLOAD_PROMPT = "(Y/N):"
LIST_DOWNLOAD_ABORTED = "Download cancelled by user."
DOWNLOAD_DESTINATION_PROMPT = "How would you like to save the files?"
DOWNLOAD_DESTINATION_OPTION_1 = "(1) Default (sorted by platform in ROMs/)"
DOWNLOAD_DESTINATION_OPTION_2 = "(2) In a single folder named after the list (ROMs/{}/)"
HELP_SEARCH = "Searches for ROMs. Usage: search <term> [-p platform] [-r region] [--slug slug] [--rom_id id]"
HELP_DOWNLOAD = "Downloads a single ROM by its identifier. Usage: download --slug <slug> | --rom_id <id> [flags]"
HELP_DOWNLOAD_LIST = "Starts downloading a list of ROMs. If no file is specified, an interactive menu will appear. Usage: download-list [filepath]"
HELP_EXIT = "Exits the interactive shell."

# === API Handler ===
API_SEARCH_ATTEMPT = "Attempting to search for '{}' on the API: {}"
API_SEARCH_NO_RESULTS = "No results found in the API for '{}'."
API_SEARCH_SUCCESS = "API search successful: {} results for '{}'."
API_DETAILS_ATTEMPT = "Attempting to get details for identifier '{}' from API: {}"
API_DETAILS_SUCCESS = "Successfully retrieved details for ROM '{}'."

# === Mirror Tester ===
MIRROR_TEST_STARTING = "Starting mirror speed test..."
MIRROR_TEST_NO_LINKS = "No links provided for mirror test."
MIRROR_TEST_DOWNLOADING = "  - Testing download from {}..."
MIRROR_TEST_PROGRESS_DESC = "Test {}"
MIRROR_TEST_HOST_SUCCESS = "Host '{}' test completed in {} with speed of {}."
MIRROR_TEST_HOST_FAILED = "Host test failed for '{}': {}"
MIRROR_TEST_ALL_FAILED = "All test mirrors failed. Using default mirror."
MIRROR_TEST_CONCLUSION = "Test complete. Fastest mirror is '{}' with {}."

# === Download Manager ===
DOWNLOAD_ALREADY_EXISTS = "ROM '{}' already exists and is validated. Skipping."
DOWNLOAD_ATTEMPTING = "Downloading '{}' from mirror: {}"
DOWNLOAD_PROGRESS_DESC = "Downloading {}"
DOWNLOAD_SUCCESS = "Successfully downloaded ROM '{}'."
MOVE_STARTING = "Moving '{}' to its final directory..."
MOVE_SUCCESS = "Successfully moved to: {}"

# === Update Checker ===
UPDATE_CHECKING_TOOL = "Checking for tool updates..."
UPDATE_TOOL_AVAILABLE = "A new version of the tool is available! It's recommended to run 'git pull' to update."

# === Final Reports ===
FINAL_REPORT_SUCCESS = "Successfully completed: {}"
FINAL_REPORT_FAILURE = "Failures: {} (check error.log for details)"
FINAL_REPORT_LOGS = "Logs saved in: {}"

# === Errors & Actions ===
ACTION_CANCELLED = "Action cancelled."
ERROR_INVALID_SELECTION = "Invalid selection. Please choose a number from the list."
ERROR_INVALID_NUMBER = "Invalid input. Please enter a number."
ERROR_INVALID_CHOICE = "Invalid option."
SEARCH_NO_RESULTS_FOUND = "No results found for '{}'."
ROM_NOT_FOUND_ANYWHERE = "ERROR: ROM with identifier '{}' could not be found on the API."
API_REQUEST_ERROR = "Connection error while accessing URL '{}'. Details: {}"
API_UNEXPECTED_ERROR = "Unexpected error in function '{}': {}"
DOWNLOAD_INCOMPLETE = "Validation error for '{}'. Download appears to be incomplete."
DOWNLOAD_CORRUPT_ZIP = "Validation error for '{}'. The ZIP file appears to be corrupt. Details: {}"
DOWNLOAD_ALL_MIRRORS_FAILED = "Failed to download '{}' after trying all available mirrors."
ERROR_GIT_NOT_FOUND = "Git was not found on your system."
ERROR_GIT_NOT_FOUND_INSTRUCTIONS = "Please install Git and ensure it is in the system's PATH to continue."
ERROR_ARIA2C_NOT_FOUND = "aria2c was not found on your system."
ARIA2C_AUTOINSTALL_START = "aria2c not found. Attempting to download and install locally..."
ARIA2C_AUTOINSTALL_SUCCESS = "aria2c successfully installed to the local 'bin' folder."
ARIA2C_AUTOINSTALL_FAILED = "Failed to install aria2c automatically. Please install it manually and add it to your PATH."
ERROR_ARIA2C_LINUX_INSTRUCTIONS = "Please install it using your distribution's package manager (e.g., sudo apt-get install aria2)."
ERROR_ARIA2C_MACOS_INSTRUCTIONS = "Please install it using Homebrew (brew install aria2)."
UNHANDLED_EXCEPTION = "Unhandled exception caught!"
UNSUPPORTED_OS_FOR_ARIA2C_INSTALL = "Operating system '{}' not supported for automatic aria2c installation."
UPDATE_TOOL_NOT_A_GIT_REPO = "Tool directory is not a Git repository. Skipping update check."
LOG_UPDATE_TOOL_AVAILABLE = "New version of the tool is available."
LOG_TOOL_UP_TO_DATE = "Tool is already up to date."
LOG_ARIA2C_SHUTDOWN_RPC = "aria2c server shut down via RPC."
LOG_ARIA2C_SHUTDOWN_FORCED = "aria2c process terminated forcefully."
ERROR_ARIA2C_EXECUTABLE_NOT_FOUND = "aria2c executable could not be found."
LOG_ARIA2C_CONNECTION_EXISTING = "Connected to an existing aria2c instance."
LOG_ARIA2C_STARTING_NEW = "No running aria2c instance found. Starting a new process..."
LOG_ARIA2C_PROCESS_STARTED = "aria2c process started with PID: {}"
ERROR_DOWNLOAD_INCOMPLETE_SIZE = "Download incomplete: file size does not match."
ERROR_DOWNLOAD_REQUESTS = "Download error with requests: {}"
ERROR_DOWNLOAD_ARIA2C = "aria2c download error for '{}': {}"
ERROR_DOWNLOAD_ARIA2C_INIT = "Failed to manage aria2c download for '{}'. Error: {}"
LOG_DOWNLOAD_MOVED_SUCCESS = "'{}' ({}) downloaded, validated, and moved successfully from '{}'."
LOG_BOXART_DOWNLOAD_SUCCESS = "Boxart for '{}' downloaded successfully."
LOG_BOXART_DOWNLOAD_FAILED = "Could not download boxart for '{}': {}"

# Main entry point errors
ERROR_CRITICAL_FAILURE = "A critical error occurred. Check 'crash.log' for details."
LOG_UNHANDLED_CRITICAL_ERROR = "An unhandled critical error occurred in the main application flow."